
== File Storage, Mark III

FogSync may sync multiple shares, each with the following properties:
 - Name
 - Encryption key (32 bytes)

To insert a file into the block cache:

 - Optionally, gzip the file.
 - Encrypt the file
    - A random nonce is stored after the header
        - Always 24 bytes
        - Use first 16 bytes if that's all that's needed
        - Pad with zeros if we need more
    - An 8 byte header is stored after the nonce.
        - 1 byte specifies encryption/authentication mode (0 is ctr-hmac)
        - 1 byte specifies cipher (0 is Twofish)
        - 1 byte specifies MAC (0 is SHA256-HMAC)
        - 1 byte spefifies compression (0 is no compression)
        - 4 bytes are reserved
    - A MAC of the encrypted data, including the header and nonce,
      is stored at the end of the file.
 - Split the result into 64k blocks, saving a list of bptrs.
 - The final, partial block (the tail) is handled specially.

A block address (bptr) is as follows:
 - sha256 hash (32 bytes)
 - start offset (4 bytes)
 - end offset (4 bytes)
 - indirection depth (4 bytes)
 = 48 bytes

Integers are unsigned, stored in network (= big endian) byte
order.

Tails are stored by appending to or creating a partial block.

If a partial block is updated, the other files with elements in
that block have their block lists updated as well.

Block lists that are longer than one btr are stored as if they
were files except that their indirection depth is +1 per level
of block list. The bptrs are simply packed into the file.

== Listing Storage, Mark III

Directory content is stored as gzipped JSON data
containing a sorted list of directory entries.

Each directory entry:
 - Name
 - Type (file, directory, symlink)
 - Last modified date
 - Last modified host
 - For symlinks, link path.
 - Size in bytes of the stored data.
 - For files and directories with non-zero size, bptr.
 - For files and directories with non-zero size, sha256 hash.
 - For files, execute permission.

== Root storage

The root stores information about the share as JSON
data.

Share root data:
 - Version #
 - Previous share bptr.
 - Date
 - Host
 - Root directory bptr.

== Listing Storage

Directory structure is stored in a flat map data structure, mapping paths
to file entries.

This map is stored as a tree of sublists of directory entries.

Each node in the tree is a list, representing some subset of the files in
sorted order. Each entry is either a file object or a subtree object which
contains the entries that go in that position in the sorted list.

The subtree object lists the name of the first and last item in the
subtree and the block address where the subtree is stored.

Inserting an item:
    - The item before it is found, and the item is inserted after it.
    - If this causes the node to overflow, the node is rebalanced.

The list format is as follows:
    - # of items in current file (2 bytes)
    - total length (2 bytes)
    - the items

Each item is
    - length of the item (2 bytes)
    - type (2 bytes)
    - flags (2 bytes)
    Either
        - ppsz: length of path (2 bytes)
        - the path (ppsz bytes)
    Or
        - block address for file
        - ppsz: length of path (2 bytes)
        - the path (ppsz bytes)
    Or
        - the number of paths in this subtree (8 bytes)
        - block address for subtree (100 bytes)
        - pps0: length of first path
        - the first path in the subtree (pps0 bytes)
        - pps1: length of the last path
        - the last path in the subtree (pps1 bytes)

Path lengths are limited to 4096 bytes, so each tree node can have
at least 6 subtrees in it.

The tree is rebalanced on insertions.

== Root block
    - Date
    - Host
    - User
    - Directory Listing bptr
    - Log bptr
